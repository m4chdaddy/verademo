<detailedreport xmlns="https://www.veracode.com/schema/reports/export/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" account_id="99999" analysis_id="9999999" app_id="999999" app_name="Pipeline Scan" assurance_level="5" build_id="9999999" business_criticality="5" business_owner="Not Specified" business_unit="Not Specified" first_build_submitted_date="2000-01-01 00:00:00 UTC" flaws_not_mitigated="133" generation_date="2000-01-01 00:00:00 UTC" grace_period_expired="true" is_latest_build="true" last_update_time="2000-01-01 00:00:00 UTC" legacy_scan_engine="false" life_cycle_stage="Not Specified" planned_deployment_date="2000-01-01 00:00:00 UTC" platform="Not Specified" policy_compliance_status="None" policy_name="Not Available" policy_rules_status="None" policy_version="1" report_format_version="1.5" sandbox_id="9999999" scan_overdue="false" static_analysis_unit_id="9999999" submitter="Pipeline Scan" tags="" teams="" total_flaws="1" veracode_level="VL1" version="Pipeline Scan" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd"><static-analysis analysis_size_bytes="9999999" engine_version="9999999" published_date="2019-07-18 20:44:55 UTC" rating="D" score="0" submitted_date="2019-07-18 20:44:55 UTC" version="pipeline scanner"><modules><module architecture="unknown" compiler="unknown" loc="9999" name="JS files within WebGoatdotNET.zip" numflawssev0="0" numflawssev1="0" numflawssev2="9" numflawssev3="29" numflawssev4="11" numflawssev5="1" os="unknown" score="0" /><module architecture="unknown" compiler="unknown" loc="9999" name="WebGoatdotNET/WebGoat/bin/DotNetGoat.dll" numflawssev0="0" numflawssev1="0" numflawssev2="9" numflawssev3="29" numflawssev4="11" numflawssev5="1" os="unknown" score="0" /><module architecture="unknown" compiler="unknown" loc="9999" name="WebGoatdotNET/WebGoat/obj/Debug/DotNetGoat.dll" numflawssev0="0" numflawssev1="0" numflawssev2="9" numflawssev3="29" numflawssev4="11" numflawssev5="1" os="unknown" score="0" /></modules></static-analysis><severity level="5"><category categoryid="999" categoryname="category name" pcirelated="false"><desc><para text="Please consult sandbox or policy scan for more information." /></desc><recommendations><para text="Please consult sandbox or policy scan for more information." /></recommendations><cwe certc="999" certcpp="999" certjava="999" cweid="999" cwename="999" owasp="999" owasp2013="999" pcirelated="false" sans="999"><description><text text="Please consult sandbox or policy scan for more information." /></description><staticflaws><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" cia_impact="" count="1" cweid="78" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on the process object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a &quot;safe&quot; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/78.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Command_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="int RunProcessWithInput(string, string, string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="0" line="53" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="util.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.Util" severity="5" sourcefile="util.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="bool IsValidCustomerLogin(string, string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="1" line="128" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on the command object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string GetCustomerEmail(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="2" line="205" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Cookies.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Data.DataSet GetCustomerDetails(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="3" line="229" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on the command object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string AddComment(string, string, string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="4" line="283" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string[] GetSecurityQuestionAndAnswer(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="5" line="332" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string GetPasswordByEmail(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="6" line="357" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.Common.DbDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Data.DataSet GetProductDetails(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="7" line="417" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.Common.DbDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Data.DataSet GetProductDetails(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="8" line="421" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Data.DataSet GetEmailByName(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="9" line="524" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to mysql_data_dll.MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The second argument to ExecuteScalar() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string GetEmailByCustomerNumber(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="10" line="539" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" cia_impact="" count="1" cweid="89" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDataAdapter.Fill() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. Fill() was called on the da object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/SQL_Injection&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Data.DataSet GetCustomerEmails(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="11" line="566" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mysqldbprovider.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.MySqlDbProvider" severity="4" sourcefile="mysqldbprovider.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable output. The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbDataAdapter.Fill.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void LoadComments()" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="12" line="82" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="productdetails.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ProductDetails" severity="3" sourcefile="productdetails.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Literal.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Literal.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="13" line="83" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="orders.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.Orders" severity="3" sourcefile="orders.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable fi.get_FullName(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="14" line="92" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="orders.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.Orders" severity="3" sourcefile="orders.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="External Control of File Name or Path" cia_impact="" count="1" cweid="73" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.HttpResponse.TransmitFile() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to TransmitFile() contains tainted data from the variable fi.get_FullName(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/73.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="15" line="101" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="orders.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.Orders" severity="3" sourcefile="orders.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.TableCell.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable row.get_Item(). The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DbDataAdapter.Fill, and system_data_dll.System.Data.Common.DataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.TableCell.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="16" line="42" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mainpage.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.MainPage" severity="3" sourcefile="mainpage.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Literal.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DataAdapter.Fill, and system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Literal.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonCheckEmail_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="17" line="38" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="forgotpassword.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ForgotPassword" severity="3" sourcefile="forgotpassword.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Literal.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DataAdapter.Fill, and system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Literal.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonRecoverPassword_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="18" line="67" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="forgotpassword.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ForgotPassword" severity="3" sourcefile="forgotpassword.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Output Neutralization for Logs" cia_impact="" count="1" cweid="117" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/117.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Log_Injection&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonLogOn_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="19" line="36" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="customerlogin.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.CustomerLogin" severity="3" sourcefile="customerlogin.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="URL Redirection to Untrusted Site ('Open Redirect')" cia_impact="" count="1" cweid="601" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&lt;/span&gt; &lt;span&gt;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable returnUrl. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/601.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonLogOn_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="20" line="72" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="customerlogin.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.CustomerLogin" severity="3" sourcefile="customerlogin.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbDataAdapter.Fill.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="21" line="23" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="catalog.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.Catalog" severity="3" sourcefile="catalog.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.HttpResponse.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable json. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequest.get_Item, system_data_dll.System.Data.Common.DbDataAdapter.Fill, and system_data_dll.System.Data.Common.DataAdapter.Fill.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ProcessRequest(System.Web.HttpContext)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="22" line="33" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="autocomplete.ashx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.Autocomplete" severity="3" sourcefile="autocomplete.ashx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnReverse_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="23" line="17" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="proxysetup.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.ProxySetup" severity="3" sourcefile="proxysetup.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable tamperedMessage. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="24" line="15" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="verbtampering.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.VerbTampering" severity="3" sourcefile="verbtampering.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.FileUpload.get_FileName.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnUpload_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="25" line="26" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="uploadpathmanipulation.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.UploadPathManipulation" severity="3" sourcefile="uploadpathmanipulation.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable comments. The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DbDataAdapter.Fill, and system_data_dll.System.Data.Common.DataAdapter.Fill.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void LoadComments()" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="26" line="52" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="storedxss.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.StoredXSS" severity="3" sourcefile="storedxss.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable output. The tainted data originated from earlier calls to mscorlib_dll.System.Exception.get_Message, system_data_dll.System.Data.Common.DbCommand.ExecuteScalar, and mysql_data_dll.MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnFind_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="27" line="30" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="sqlinjectiondiscovery.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.SQLInjectionDiscovery" severity="3" sourcefile="sqlinjectiondiscovery.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_Item.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void LoadCity(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="28" line="26" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="reflectedxss.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.ReflectedXSS" severity="3" sourcefile="reflectedxss.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.FileUpload.get_PostedFile.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnUpload_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="29" line="23" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="readlinedos.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.ReadlineDoS" severity="3" sourcefile="readlinedos.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Label.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="30" line="43" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="pathmanipulation.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.PathManipulation" severity="3" sourcefile="pathmanipulation.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="External Control of File Name or Path" cia_impact="" count="1" cweid="73" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to mscorlib_dll.System.IO.FileStream.!newinit_0_4() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !newinit_0_4() contains tainted data from the variable _fullPath. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.&lt;/span&gt; &lt;span&gt;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/73.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;OWASP&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="bool ResponseFile(System.Web.HttpRequest, System.Web.HttpResponse, string, string, long)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="31" line="53" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="pathmanipulation.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.PathManipulation" severity="3" sourcefile="pathmanipulation.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Output Neutralization for Logs" cia_impact="" count="1" cweid="117" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/117.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Log_Injection&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnDigest_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="32" line="25" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="messagedigest.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.Content.MessageDigest" severity="3" sourcefile="messagedigest.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Literal.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DataAdapter.Fill, and system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Literal.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonCheckEmail_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="33" line="37" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="forgotpassword.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.ForgotPassword" severity="3" sourcefile="forgotpassword.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.Literal.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data. The tainted data originated from earlier calls to system_data_dll.System.Data.Common.DataAdapter.Fill, and system_data_dll.System.Data.Common.DbDataAdapter.Fill. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.Literal.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void ButtonRecoverPassword_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="34" line="66" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="forgotpassword.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.ForgotPassword" severity="3" sourcefile="forgotpassword.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Use of Hard-coded Password" cia_impact="" count="1" cweid="259" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. Password&lt;/span&gt; &lt;span&gt;Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/259.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void Page_Load(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="35" line="28" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="encryptvsencode.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.EncryptVSEncode" severity="3" sourcefile="encryptvsencode.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" cia_impact="" count="1" cweid="80" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to system_web_dll.System.Web.UI.WebControls.TableCell.set_Text() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to set_Text() contains tainted data from the variable val. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text. The tainted data is directed into an output stream returned by system_web_dll.System.Web.UI.WebControls.TableCell.&lt;/span&gt; &lt;span&gt;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/79.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="System.Web.UI.WebControls.TableRow MakeRow(string, string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="36" line="67" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="encryptvsencode.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.EncryptVSEncode" severity="3" sourcefile="encryptvsencode.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Use of a Broken or Risky Cryptographic Algorithm" cia_impact="" count="1" cweid="327" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This function uses the mscorlib_dll.System.Security.Cryptography.SHA1Managed.!newinit_0_0() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. &lt;/span&gt; &lt;span&gt;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/327.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string SHA(string, WG_Hash)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="37" line="102" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="encryptvsencode.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.EncryptVSEncode" severity="3" sourcefile="encryptvsencode.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Output Neutralization for Logs" cia_impact="" count="1" cweid="117" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to log4net_dll.log4net.ILog.Debug() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Debug() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/117.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Log_Injection&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="string GenerateWeakDigest(string)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="38" line="26" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="weakmessagedigest.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.WeakMessageDigest" severity="3" sourcefile="weakmessagedigest.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Improper Output Neutralization for Logs" cia_impact="" count="1" cweid="117" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.UI.WebControls.TextBox.get_Text.&lt;/span&gt; &lt;span&gt;Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/117.html&quot;&gt;CWE&lt;/a&gt; &lt;a href=&quot;https://owasp.org/www-community/attacks/Log_Injection&quot;&gt;OWASP&lt;/a&gt; &lt;a href=&quot;https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA&quot;&gt;Supported Cleansers&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="IDbProvider Create(ConfigFile)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="39" line="20" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="dbproviderfactory.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.App_Code.DB.DbProviderFactory" severity="3" sourcefile="dbproviderfactory.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/app_code/db/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Use of Hard-coded Password" cia_impact="" count="1" cweid="259" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt;This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. passwordQuestion initializer&lt;/span&gt; &lt;span&gt;Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/259.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="UNKNOWN" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="40" line="1" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="addnewuser.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="UNKNOWN" severity="3" sourcefile="addnewuser.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.TextBox.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable error_message. The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="41" line="42" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="productdetails.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ProductDetails" severity="2" sourcefile="productdetails.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable ex.get_Message(). The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="42" line="48" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="productdetails.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ProductDetails" severity="2" sourcefile="productdetails.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.TextBox.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable email. The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void LoadComments()" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="43" line="92" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="productdetails.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.WebGoatCoins.ProductDetails" severity="2" sourcefile="productdetails.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnUpload_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="44" line="64" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="mainpage.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.MainPage" severity="2" sourcefile="mainpage.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/webgoatcoins/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data). The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnUpload_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="45" line="31" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="uploadpathmanipulation.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.UploadPathManipulation" severity="2" sourcefile="uploadpathmanipulation.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.TextBox.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable error_message. The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="46" line="31" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="storedxss.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.StoredXSS" severity="2" sourcefile="storedxss.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable ex.get_Message(). The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnSave_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="47" line="37" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="storedxss.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.StoredXSS" severity="2" sourcefile="storedxss.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable output. The data from an error message (possibly containing untrusted data) originated from earlier calls to mscorlib_dll.System.Exception.get_Message, system_data_dll.System.Data.Common.DbCommand.ExecuteScalar, and mysql_data_dll.MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnFind_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="48" line="30" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="sqlinjectiondiscovery.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.SQLInjectionDiscovery" severity="2" sourcefile="sqlinjectiondiscovery.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /><flaw affects_policy_compliance="false" categoryid="0" categoryname="Information Exposure Through an Error Message" cia_impact="" count="1" cweid="209" date_first_occurrence="2020-07-02 14:29:26 UTC" description="&lt;span&gt; The application calls the system_web_dll.System.Web.UI.WebControls.Label.set_Text() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to set_Text() contains data from an error message (possibly containing untrusted data) from the variable ex.get_Message(). The data from an error message (possibly containing untrusted data) originated from an earlier call to mscorlib_dll.System.Exception.get_Message.&lt;/span&gt; &lt;span&gt;Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.&lt;/span&gt; &lt;span&gt;References: &lt;a href=&quot;https://cwe.mitre.org/data/definitions/209.html&quot;&gt;CWE&lt;/a&gt;&lt;/span&gt;" exploitLevel="0" functionprototype="void btnFind_Click(object, System.EventArgs)" functionrelativelocation="0" grace_period_expires="2019-07-18 17:43:20 UTC" issueid="49" line="34" mitigation_status="none" mitigation_status_desc="Not Mitigated" module="sqlinjectiondiscovery.aspx.cs" note="" pcirelated="false" remediation_status="Open" remediationeffort="1" scope="dotnetgoat_dll.OWASP.WebGoat.NET.SQLInjectionDiscovery" severity="2" sourcefile="sqlinjectiondiscovery.aspx.cs" sourcefilepath="users/administrator/source/repos/webgoatdotnet/webgoat/content/" type="" /></staticflaws></cwe></category></severity><severity level="4" /><severity level="3" /><severity level="2" /><severity level="1" /><severity level="0" /><flaw-status cannot-reproduce="0" fixed="0" new="0" not_mitigated="0" open="0" reopen="0" sev-1-change="0" sev-2-change="0" sev-3-change="0" sev-4-change="0" sev-5-change="0" total="0" /><customfields><customfield name="Custom 1" value="" /><customfield name="Custom 2" value="" /><customfield name="Custom 3" value="" /><customfield name="Custom 4" value="" /><customfield name="Custom 5" value="" /><customfield name="Custom 6" value="" /><customfield name="Custom 7" value="" /><customfield name="Custom 8" value="" /><customfield name="Custom 9" value="" /><customfield name="Custom 10" value="" /></customfields></detailedreport>