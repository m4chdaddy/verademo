name: Static Analysis w/Github Action

on:
  push:
    branches: [ "demo" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file app/pom.xml
      
    - name: Archive package
      uses: actions/upload-artifact@v2
      with:
        name: CodePackage
        path: '**/*.war'
        
    - name: Veracode Upload And Scan
      # You may pin to the exact commit or the version.
      # uses: veracode/veracode-uploadandscan-action@35794dab9fbcd28fac19e44963f80646b27f4a7f
      uses: veracode/veracode-uploadandscan-action@0.2.4
      with:
        # appname
        appname: ${{ github.workspace }}
        # createprofile
        createprofile: true # default is true
        # filepath
        filepath: ./app/target/verademo.war
        # version
        version: ${{ github.run_id }}-${{ github.run_number }} # default is Scan from Github job: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
        # vid
        vid: ${{secrets.VERACODE_API_ID}}
        # vkey
        vkey: ${{secrets.VERACODE_API_KEY}}
        # true or false
        createsandbox: true # optional
        # name of the sandbox
        sandboxname: TestingBox # optional
        # wait X minutes for the scan to complete
        scantimeout: 60 # optional
        # modules to exclude from module selection
#        exclude: # optional
        # modules to include in module selection
#        include: # optional
        # business criticality - policy selection
#        criticality: # optional
        # filename pattern
#        pattern: # optional
        # replacement
#        replacement: # optional
        # specify to scan in a sandbox
#        sandboxid: # optional
        # All top level modules
#        scanallnonfataltoplevelmodules: # optional
        # platform selected modules
#        selected: # optional
        # selected modules like from previous scan
#        selectedpreviously: # optional
        # teams
#        teams: # optional
        # teams
#        toplevel: # optional
        # automatically delete the current scan if there are any errors when uploading files or starting the scan
#        deleteincompletescan: # optional
        # specify version of the Java API Wrapper; default is latest
#        javawrapperversion: # optional
        # show detailed diagnostic information, which you can use for debugging, in the output.
#        debug: # optional
      continue-on-error: true
      
  get-policy-flaws:
    runs-on: ubuntu-latest
    container: 
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name='${{ github.workspace }}'" | jq -r '._embedded.applications[0].guid') 
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
      - name: save results file
        uses: actions/upload-artifact@v2
        with:
          name: policy-flaws
          path: /tmp/policy_flaws.json

# This step will import flaws from the step above
  import-policy-flaws:
    needs: get-policy-flaws
    runs-on: ubuntu-latest
    steps:
      - name: get flaw file
        uses: actions/download-artifact@v2
        with:
          name: policy-flaws
          path: /tmp

      - name: import flaws as issues
        uses: buzzcode/veracode-flaws-to-issues@v1
        with:
          scan-results-json: '/tmp/policy_flaws.json'
          github-token: ${{ secrets.TEST }}
