# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Veracode Static Analysis Demo
on: workflow_dispatch
    
jobs:
  static_analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out main branch
        uses: actions/checkout@v2
        
      - name: Build with Maven # Compiling the .war binary from the checked out repo source code to upload to the scanner in the next step
        run: mvn -B package --file app/pom.xml
          
      - name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@0.2.1

        with:
          appname: 'demo-sca'
          createprofile: true
          filepath: 'app/target/verademo.war'
          vid: '${{ secrets.API_ID }}'
          vkey: '${{ secrets.API_KEY }}'
          createsandbox: 'true'
          sandboxname: 'Github Action'
#          scantimeout: 0
#          exclude: '*.js'
#          include: '*.war'
          criticality: 'VeryHigh'

 
    baseline:
        runs-on: ubuntu-latest
        steps:
        - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
        #- name: Download the Pipeline Scanner
          uses: wei/curl@master
          with:
          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    #- name: Unzip the Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip
        #- name: Create Baseline
        script:
            java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "example.jar" --json_output_file="baseline.json" || true
        name: Upload Baseline
          uses: actions/upload-artifact@v1
            with:
              name: baseline
              path: baseline.json
  baseline-scan:
    runs-on: ubuntu-latest
    needs: baseline
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download the Pipeline Scanner
        uses: wei/curl@master
        with:
          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      - name: Unzip the Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip
      - name: download baseline
        uses: actions/download-artifact@v1
        with:
          name: baseline
      - name: Scan with baseline
        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "example.jar" --baseline_file "baseline/baseline.json"

      
#steps:
      #- name: SCA
      
          
          
        #name: Veracode Software Composition Analysis
        #on: static success
                  # You may pin to the exact commit or the version.
       # uses: Lerer/veracode-sca@661e856c8b6a720ad6e1e430a9d2300b78b5d381
                #uses: mokkang/verademo-jenkins@v2
       # with:
               # Authorization token to query and create issues
        #   github_token: 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
                  # 
                   # quick: # optional, default is false.  
         #         # Show update advisor
          # update_advisor: true # optional, default is false
                   # A git URL to work with in case the scan is not for the current repository
                    #url: # optional, default is 
                    # The minimum CVSS value for vulnerability to be added as an issue
                    #min-cvss-for-issue: # optional, default is 0
                    # The maximum allowed cvss in found vulnerabilities to pass the step
                    #fail-on-cvss: # optional, default is 10
                    # An attribute to instruct the action to create an issue from found vulnerability or just simple text output
                    #create-issues: # optional, default is false
                    # A path within the repository where the build definition starts
                    #path: # optional, default is .
                    # Run the SRCCLR in debug mode
                    #debug: # optional, default is false
                    # Run the SRCCLR with the `--skip-collectors` options
                    #skip-collectors: # optional, default is false
                    # Run the SRCCLR with the `--allow-dirty` option
    #       allow-dirty: true # optional, default is false
   #                 # Run the SRCCLR with the `--recursive` option
  #         recursive: true # optional, default is false
 #          srcclr: mvn com.srcclr:srcclr-maven-plugin:scan
#
